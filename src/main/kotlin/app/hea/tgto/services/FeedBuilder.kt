package app.hea.tgto.services

import app.hea.tgto.UserInfo
import app.hea.tgto.coroutines.elastic
import app.hea.tgto.dao.DefaultCMessageDao
import app.heap.tgto.db.tables.pojos.Message
import app.heap.tgto.db.tables.pojos.TgUser
import com.rometools.rome.feed.synd.SyndContentImpl
import com.rometools.rome.feed.synd.SyndEntry
import com.rometools.rome.feed.synd.SyndEntryImpl
import com.rometools.rome.feed.synd.SyndFeedImpl
import com.rometools.rome.io.SyndFeedOutput
import java.io.StringWriter
import java.time.Instant
import java.time.format.DateTimeFormatter
import java.util.Date

/**
 * Builds feed of provided user.
 *
 * @author Ruslan Ibragimov
 */
interface FeedBuilder {
    suspend fun feed(user: TgUser, limit: Int): String
}

class RomeFeedBuilder(
    private val messageDao: DefaultCMessageDao,
    private val userInfo: UserInfo,
    private val markdownService: MarkdownService
) : FeedBuilder {
    override suspend fun feed(user: TgUser, limit: Int): String = elastic {
        val messages = messageDao.list(user.userId, limit)

        val feed = SyndFeedImpl().apply {
            title = "ToRssBot"
            link = "https://t.me/ToRssBot"
            uri = userInfo.getFeedUrl(user)
            description = "Feed generated by ToRssBot."
            feedType = "atom_1.0"
            docs = "http://www.atomenabled.org/developers/syndication/atom-format-spec.php"
            language = "en"
            generator = "ToRssBot"
            publishedDate = Date.from(Instant.now())
            entries = messages.map { toSyndEntry(user, it) }
        }

        StringWriter().use { writer ->
            val feedOutput = SyndFeedOutput()
            feedOutput.output(feed, writer)
            writer.buffer.toString()
        }
    }

    private fun toSyndEntry(user: TgUser, message: Message): SyndEntry {
        return SyndEntryImpl().apply {
            title = message.created.toLocalDateTime().format(DateTimeFormatter.ISO_DATE_TIME)
            link = userInfo.getFeedItemUrl(user, message)
            author = ""
            publishedDate = Date.from(message.created.toInstant())
            description = SyndContentImpl().also { content ->
                content.value = markdownService.render(message.message)
            }
        }
    }
}
